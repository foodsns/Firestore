rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    match /readonly/{docId} {
      allow read: if true;
      allow write: if false;
    }

    match /users/{userId} {
      function supportKeys() {
        return request.resource.data.keys().hasAll(
          ['displayName', 'email', 'emailVerified', 'photoURL', 'lastLogin']) 
        && request.resource.data.keys().hasOnly(
        ['displayName', 'email', 'emailVerified', 'phoneNumber', 'photoURL', 'lastLogin']);
      }
      function validateDataType (docData) {
        return docData.displayName is string &&
                docData.email is string &&
                docData.emailVerified is bool &&
                docData.get('phoneNumber', "") is string &&
                docData.photoURL is string &&
                docData.lastLogin is timestamp;
      }
      function validateDataValue (docData) {
        return docData.displayName.size() >= 2 && docData.displayName.size() < 500 &&
                docData.email.matches("^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$") &&
                (docData.get('phoneNumber', null) != null ? docData.phoneNumber.matches("^[0-9]{3}[-]+[0-9]{3,4}[-]+[0-9]{3,4}$") : true) &&
                docData.photoURL.size() < 1000 &&
                docData.photoURL.matches("https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)")

      }
      allow read: if (request.auth.uid == userId);
      allow write: if (request.auth.uid == userId 
                      && supportKeys() 
                      && validateDataType(request.resource.data)
                      && validateDataValue(request.resource.data));
    }

    match /pages/{postId} {
      allow read: if (resource.data.visibility == "public") || (resource.data.authorId == request.auth.uid);
    }

    match /posts/{postId} {
      function supportKeys() {
        return request.resource.data.keys().hasAll(
          ['country', 'city', 'state', 'street', 'lat', 'lot', 'title', 'hashtag', 'descript', 'date', 'profileImg', 'writer', 'img', 'visibility']) 
        && request.resource.data.keys().hasOnly(
        ['id', 'country', 'city', 'state', 'street', 'lat', 'lot', 'title', 'hashtag', 'descript', 'date', 'profileImg', 'writer', 'good', 'img', 'visibility', 'authorId']);
      }
      function disaffectKeys() {
        return request.auth.uid == resource.data.authorId
        // 글쓴이 자기 자신이 건들 수 없는 키
                ? !request.resource.data.diff(resource.data).affectedKeys().hasAny(['id', 'authorId', 'good'])
        // 제 3자가 건들 수 없는 키
                : !request.resource.data.diff(resource.data).affectedKeys().hasAny(
                  ['id', 'country', 'city', 'state', 'street', 'lat', 'lot', 'title', 'hashtag', 'descript', 'date', 'profileImg', 'writer', 'img', 'visibility', 'authorId'])
      }
      function fullValidateDataType (docData) {
        return docData.id is string &&
                docData.country is string &&
                docData.city is string &&
                docData.state is string &&
                docData.street is string &&
                docData.lat is float &&
                docData.lot is float &&
                docData.title is string &&
                docData.hashtag is string &&
                docData.descript is string &&
                docData.date is string &&
                docData.profileImg is string &&
                docData.writer is string &&
                docData.get('good', 0) is int &&
                docData.img is string &&
                docData.visibility is string &&
                docData.authorId is string;
      }
      function meValidateDataType(docData) {
        return 
                docData.country is string &&
                docData.city is string &&
                docData.state is string &&
                docData.street is string &&
                docData.lat is float &&
                docData.lot is float &&
                docData.title is string &&
                docData.hashtag is string &&
                docData.descript is string &&
                docData.date is string &&
                docData.profileImg is string &&
                docData.writer is string &&
                docData.img is string &&
                docData.visibility is string;
      }
      function fullValidateDataValue(docData) {
        return docData.id.size() >= 20 && docData.id.size() < 40
        // https://www.google.com/search?q=country+name+length&newwindow=1&rlz=1C5CHFA_enKR936KR936&sxsrf=AOaemvLEsnSgljNsZH0LJFVRXiDk_oOsgQ%3A1633602724479&ei=pMxeYZnJHLTfmAWzrIIY&ved=0ahUKEwiZq-KwjLjzAhW0L6YKHTOWAAMQ4dUDCA4&uact=5&oq=country+name+length&gs_lcp=Cgdnd3Mtd2l6EAMyBQgAEMsBMgYIABAFEB4yBggAEAUQHjIGCAAQBRAeOgkIABCwAxAIEB46BggAEAgQHjoECCMQJzoKCAAQgAQQhwIQFDoFCAAQgAQ6BwgAEAoQywE6BAgAEB5KBAhBGAFQ6XxY3oYBYLiIAWgDcAB4AIAB2gGIAewIkgEFMC44LjGYAQCgAQHIAQXAAQE&sclient=gws-wiz
                && docData.country.size() >= 4 && docData.country.size() < 60
                && docData.city.size() >= 2 && docData.city.size() < 100
                && docData.state.size() >= 2 && docData.state.size() < 100
                && docData.street.size() >= 2 && docData.street.size() < 100
                // https://stackoverflow.com/a/23914607/7270469
                && docData.lat >= -90 && docData.lat <= 90
                && docData.lot >= -180 && docData.lot <= 180
                && docData.title.size() >= 2 && docData.title.size() < 200
                && docData.hashtag.size() >= 2 && docData.hashtag.size() < 50
                && docData.descript.size() >= 2 && docData.descript.size() < 200
                && docData.date.size() >= 2 && docData.date.size() < 100
                && docData.profileImg.size() < 1000
                && docData.profileImg.matches("https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)")
                && docData.writer.size() < 500
                && docData.good == 0
                // && (docData.good == null || docData.good >= 0)
                && docData.img.size() < 1000
                && docData.img.matches("https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)")
                && docData.visibility.matches("(public)|(private)")
                && request.auth.uid == docData.authorId
      }
      function meValidateDataValue(docData) {
        return
        // https://www.google.com/search?q=country+name+length&newwindow=1&rlz=1C5CHFA_enKR936KR936&sxsrf=AOaemvLEsnSgljNsZH0LJFVRXiDk_oOsgQ%3A1633602724479&ei=pMxeYZnJHLTfmAWzrIIY&ved=0ahUKEwiZq-KwjLjzAhW0L6YKHTOWAAMQ4dUDCA4&uact=5&oq=country+name+length&gs_lcp=Cgdnd3Mtd2l6EAMyBQgAEMsBMgYIABAFEB4yBggAEAUQHjIGCAAQBRAeOgkIABCwAxAIEB46BggAEAgQHjoECCMQJzoKCAAQgAQQhwIQFDoFCAAQgAQ6BwgAEAoQywE6BAgAEB5KBAhBGAFQ6XxY3oYBYLiIAWgDcAB4AIAB2gGIAewIkgEFMC44LjGYAQCgAQHIAQXAAQE&sclient=gws-wiz
                docData.country.size() >= 4 && docData.country.size() < 60
                && docData.city.size() >= 2 && docData.city.size() < 100
                && docData.state.size() >= 2 && docData.state.size() < 100
                && docData.street.size() >= 2 && docData.street.size() < 100
                // https://stackoverflow.com/a/23914607/7270469
                && docData.lat >= -90 && docData.lat <= 90
                && docData.lot >= -180 && docData.lot <= 180
                && docData.title.size() >= 2 && docData.title.size() < 200
                && docData.hashtag.size() >= 2 && docData.hashtag.size() < 50
                && docData.descript.size() >= 2 && docData.descript.size() < 200
                && docData.date.size() >= 2 && docData.date.size() < 100
                && docData.profileImg.size() < 1000
                && docData.profileImg.matches("https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)")
                && docData.writer.size() < 500
                && docData.img.size() < 1000
                && docData.img.matches("https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)")
                && docData.visibility.matches("(public)|(private)")
      }
      function validateDataTypeAndValue(docData, mode) {
        return {
          "me": meValidateDataType(docData) && meValidateDataValue(docData),
          "other": (docData.good is int && (docData.good == get(/databases/$(database)/documents/posts/$(postId)).data.good + 1))
        } [mode]
      }
      allow read: if (resource.data.visibility != null && resource.data.visibility == "public") || (request.auth != null && resource.data.authorId == request.auth.uid);
      // allow write: if (request.auth != null && (resource.data.authorId == null || resource.data.authorId == requiest.auth.uid));
      allow create: if (request.auth != null
                        && supportKeys() 
                        && fullValidateDataType(request.resource.data)
                        && fullValidateDataValue(request.resource.data));
      allow update: if (request.auth != null 
                        && supportKeys() 
                        && disaffectKeys() 
                        && validateDataTypeAndValue(request.resource.data, resource.data.authorId == request.auth.uid ? "me" : "other"));
      allow delete: if (request.auth != null 
                        && resource.data.authorId == request.auth.uid);
    }
    match /posts/{postId}/goods/{userId} {
      function fullValidateDataType (docData) {
        return 
                docData.authorId is string &&
                docData.setTime is timestamp;
      }
      function fullValidateDataValue(docData) {
        return request.auth.uid == docData.authorId
      }
      allow write: if (request.auth != null 
                      && request.auth.uid == userId
                      && fullValidateDataType(request.resource.data)
                      && fullValidateDataValue(request.resource.data)
                      && get(/databases/$(database)/documents/posts/$(postId)).data.authorId != userId)
    }

    match /{path=**}/goods/{userId} {
      allow read: if request.auth != null;
    }
  }
}