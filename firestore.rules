rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    match /readonly/{docId} {
      allow read: if true;
      allow write: if false;
    }

    match /users/{userId} {
      allow write: if (request.auth.uid == userId);
    }

    match /pages/{postId} {
      allow read: if (resource.data.visibility == "public") || (resource.data.authorId == request.auth.uid);
    }

    match /posts/{postId} {

      function supportKeys() {
        return request.resource.data.keys().hasAll(
          ['id', 'country', 'city', 'state', 'street', 'lat', 'lot', 'title', 'hashtag', 'descript', 'date', 'profileImg', 'writer', 'good', 'img', 'visibility', 'authorId']) 
        && request.resource.data.keys().hasOnly(
        ['id', 'country', 'city', 'state', 'street', 'lat', 'lot', 'title', 'hashtag', 'descript', 'date', 'profileImg', 'writer', 'good', 'img', 'visibility', 'authorId']);
      }
      allow read: if (resource.data.visibility != null && resource.data.visibility == "public") || (request.auth != null && resource.data.authorId == request.auth.uid);
      // allow write: if (request.auth != null && (resource.data.authorId == null || resource.data.authorId == requiest.auth.uid));
      allow create: if (request.auth != null && request.resource.data.authorId != null && request.resource.data.authorId == request.auth.uid && supportKeys());
      allow update, delete: if (request.auth != null && request.resource.data.authorId == request.auth.uid && resource.data.authorId == request.auth.uid && supportKeys());

    }
  }
}